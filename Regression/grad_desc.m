%% Import data from text file.
% Script for importing data from the following text file:
%
%    /home/projeto/Workspace/Matlab/Matlab-ML/Regression/Nanook_Vels.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2020/03/26 20:01:53
clear;close all;clc
%% Initialize variables.
filename = '/home/projeto/Workspace/Matlab/Matlab-ML/Regression/Nanook_Vels.csv';
delimiter = ',';
startRow = 2;

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
SetPoint = dataArray{:, 1};
M_D = dataArray{:, 2};
M_E = dataArray{:, 3};


%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

%% Regressão Linear (LSE)

% Y = X . B
% Y -> leitura ; X -> modelo ; B -> Parâmetros para estimar
Y_D = M_D;
Y_E = M_E;
n = length(SetPoint);
% Modelo definido aqui (X)
% X = SetPoint; %b*x
X = [ones(n,1) SetPoint]; %b0 + b1*x
% X = [ones(n,1) SetPoint SetPoint.*SetPoint]; %b0 + b1*x + b2*x^2

% e = Y - XB

B_D = inv(X'*X)*X'*Y_D;
B_E = inv(X'*X)*X'*Y_E;

% Erro médio quadrático
disp('Modelo -> ')
disp(X)

disp('Erro médio quadrático')
E_D_v = Y_D - X*B_D;
E_D = E_D_v'*E_D_v

% Erro médio quadrático
E_E_v = Y_E - X*B_E;
E_E = E_E_v'*E_E_v
B_D
B_E

plot(SetPoint,Y_D)
hold on
plot(SetPoint,X*B_D)
close all
%% Gradient Descent
maxIt = 100;
X = [ones(n,1) SetPoint]; %b0 + b1*x
Beta = 1*randn(2,1);
% J = (y - (b0+b1*x) )
l_rate0 = 1;
l_rate1 = 0.0001;
N = length(X);
for it=1:maxIt
    
    e = (X*Beta - Y_D);
    Cost = sum(e.^2)/(2*N);
    grad_0 = 0;
    grad_1 = 0;
    
    for i=1:N
       grad_0 = grad_0 + e(i);
       grad_1 = grad_1 + e(i)*X(i,2);
    end
    grad_0 = grad_0/N;
    grad_1 = grad_1/N;
    delta = [ l_rate0*grad_0; 
              l_rate1*grad_1];
    Beta = Beta - delta;
    plot(SetPoint,Y_D)
    hold on
    plot(SetPoint,X*Beta)
    hold off
    drawnow
    
    pause(0.01)
    it
end
Beta






