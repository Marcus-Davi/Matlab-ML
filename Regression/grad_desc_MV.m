%% Import data from text file.
% Script for importing data from the following text file:
%
%    /home/projeto/Workspace/Matlab/Matlab-ML/Regression/pp_data.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2020/03/27 02:45:18
clear;close all;clc
%% Initialize variables.
filename = '/home/projeto/Workspace/Matlab/Matlab-ML/Regression/pp_data.csv';
delimiter = ',';
startRow = 2;

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string', 'EmptyValue', NaN, 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
AT = dataArray{:, 1};
V = dataArray{:, 2};
AP = dataArray{:, 3};
RH = dataArray{:, 4};
PE = dataArray{:, 5};


%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

%% Multivar Linear Regrr + Grad Desc
N = length(AT);
X = [AT V AP RH];
Y= PE;
Xscaling = max(X) - min(X);
Yscaling = max(Y) - min(Y);
X = X./ Xscaling;
Y = Y./ Yscaling;
X = [ones(N,1) X];

%% Analytical
% Beta_a = inv(X'*X)*X'*Y
% err = X*Beta_a - Y;
% cost= sum(err.^2)/(2*N)
% plot(X*Beta_a)
% hold on
% plot(Y)
% legend('Model','Output')
% return

%% Grad Desc
Beta = rand(5,1);

maxIT = 1000;
lrate = 0.001;
% lrate = [0.001 0.001 0.001 0.001 0.001]';

for i=1:maxIT
    
    err = X*Beta - Y;
    Cost(i) = sum(err.^2)/(2*N);
    
    grad = err.*X;
    grad = sum(grad)/N;
    Beta = Beta - lrate.*grad';
    
    
    
end
    
    Cost(end)
    Beta
    
%     Beta_rescaled = Beta.*[1 Xscaling]';
    X_rescaled = X.*[1 Xscaling];
    Y_rescaled = Y.*Yscaling;
    plot(Y)
    hold on
    plot(X*Beta)
    grid on;
    legend('Output','Estimation')
    
% Ideal Beta
%     6.0213
%    -0.9246
%    -0.1741
%     0.0332
%    -0.1562

%
%   454.6093
%    -1.9775
%    -0.2339
%     0.0621
%    -0.1581
    
   